import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms'; // Import ReactiveFormsModule here
import { Router } from '@angular/router';
import { BarCodeScannerService } from '../barcode-scanner.service';
import { debounceTime, distinctUntilChanged } from 'rxjs';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-registration',
  standalone: true,
  imports: [CommonModule,ReactiveFormsModule], // Import ReactiveFormsModule here
  templateUrl: './registration.component.html',
  styleUrls: ['./registration.component.scss']
})
export class RegistrationComponent implements OnInit {
  userForm!: FormGroup;
  base64String: string = '';
  imageSrc: string | null = null;
  selectedroles: string | null = 'reception'; // Default role is 'reception'

  constructor(
    private fb: FormBuilder,
    private router: Router,
    private barCodeService: BarCodeScannerService
  ) {}

  ngOnInit(): void {
    this.initializeForm();

    // Watch for form value changes
    this.userForm.valueChanges.pipe(
      debounceTime(300),
      distinctUntilChanged()
    ).subscribe((value) => {
      console.log('Form Value Changed:', value);
    });

    // Watch for role changes
    this.userForm.get('roles')?.valueChanges.subscribe(value => {
      this.selectedroles = value;
      this.updatePasswordValidators();
    });
  }

  initializeForm() {
    this.userForm = this.fb.group({
      userId: [null], // Optional, can be auto-generated by backend
      employeeUniqueId: [null], // Optional, if auto-generated
      userName: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]],
      phoneNumber: ['', Validators.required],
      departmentName: ['', Validators.required],
      designation: ['', Validators.required],
      barcode: [null], // Optional, if provided later
      password: [null], // Initially set to null, password validator will change based on role
      roles: ['reception', Validators.required] // Default role is 'reception'
    });

    this.updatePasswordValidators(); // Update password validators based on default role
  }

  // Update password validators based on selected role
  updatePasswordValidators() {
    const passwordControl = this.userForm.get('password');
    if (this.selectedroles !== 'Client') {
      passwordControl?.setValidators([Validators.required, Validators.minLength(6)]);
    } else {
      passwordControl?.clearValidators();
    }
    passwordControl?.updateValueAndValidity();
  }

  onSubmit() {
    if (this.userForm.invalid) {
      return;
    }

    const user = this.userForm.value;
    console.log('Submitting user:', user); // Log form data

    this.barCodeService.registration(user).subscribe({
      next: (response) => {
        this.base64String = response.image;
        this.imageSrc = `data:image/png;base64,${this.base64String}`;
        this.downloadImage();
        this.router.navigate(['/dashboard']); // Redirect to login page
      },
      error: (error) => {
        console.error('Registration failed:', error);
      }
    });
  }

  downloadImage() {
    if (this.base64String) {
      const link = document.createElement('a');
      link.href = `data:image/png;base64,${this.base64String}`;
      link.download = 'image.png'; // You can change the file name here
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  }
}
